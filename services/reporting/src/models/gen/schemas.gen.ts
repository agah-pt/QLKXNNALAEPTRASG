// This file is auto-generated by @hey-api/openapi-ts

export const $Month = {
    type: 'number',
    minimum: 1,
    maximum: 12
} as const;

export const $Year = {
    type: 'number',
    minimum: 2000,
    maximum: 3000
} as const;

export const $MonthlyReport = {
    type: 'object',
    required: ['month', 'year', 'accountId', 'currencies'],
    properties: {
        month: {
            '$ref': '#/components/schemas/Month'
        },
        year: {
            '$ref': '#/components/schemas/Year'
        },
        accountId: {
            '$ref': '#/components/schemas/UUID'
        },
        currencies: {
            type: 'array',
            items: {
                type: 'object',
                required: ['currency', 'transactions'],
                properties: {
                    currency: {
                        '$ref': '#/components/schemas/SupportedCurrencies'
                    },
                    transactions: {
                        type: 'array',
                        items: {
                            '$ref': '#/components/schemas/StatementTransaction'
                        }
                    }
                }
            }
        }
    }
} as const;

export const $StatementTransaction = {
    type: 'object',
    required: ['transactionId', 'type', 'amount', 'createdAt'],
    properties: {
        transactionId: {
            '$ref': '#/components/schemas/UUID'
        },
        type: {
            '$ref': '#/components/schemas/TransactionType'
        },
        amount: {
            '$ref': '#/components/schemas/TransactionAmount'
        },
        createdAt: {
            '$ref': '#/components/schemas/ISODate'
        }
    }
} as const;

export const $SupportedCurrencies = {
    type: 'string',
    enum: ['KWD', 'BHD', 'OMR', 'JOD', 'GIP', 'GBP', 'KYD', 'CHF', 'EUR', 'USD']
} as const;

export const $TransactionType = {
    type: 'string',
    enum: ['INBOUND', 'OUTBOUND']
} as const;

export const $TransactionAmount = {
    type: 'number',
    minimum: 1
} as const;

export const $BalanceAmount = {
    type: 'number'
} as const;

export const $UUID = {
    type: 'string',
    pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
} as const;

export const $ISODate = {
    type: 'string',
    pattern: '^^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$'
} as const;

export const $CurrencyBalance = {
    type: 'object',
    required: ['currency', 'amount'],
    properties: {
        currency: {
            '$ref': '#/components/schemas/SupportedCurrencies'
        },
        amount: {
            '$ref': '#/components/schemas/BalanceAmount'
        }
    }
} as const;

export const $EventTypes = {
    type: 'string',
    enum: ['account-created', 'transaction-created']
} as const;

export const $AccountPartial = {
    type: 'object',
    required: ['supportedCurrencies'],
    properties: {
        supportedCurrencies: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SupportedCurrencies'
            }
        }
    }
} as const;

export const $Account = {
    allOf: [
        {
            '$ref': '#/components/schemas/AccountPartial'
        },
        {
            type: 'object',
            required: ['accountId', 'supportedCurrencies'],
            properties: {
                accountId: {
                    '$ref': '#/components/schemas/UUID'
                }
            }
        }
    ]
} as const;

export const $AccountWithBalance = {
    allOf: [
        {
            '$ref': '#/components/schemas/Account'
        },
        {
            type: 'object',
            properties: {
                balances: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/CurrencyBalance'
                    }
                }
            }
        }
    ]
} as const;

export const $TransactionPartial = {
    type: 'object',
    required: ['currency', 'type', 'amount'],
    properties: {
        currency: {
            '$ref': '#/components/schemas/SupportedCurrencies'
        },
        type: {
            '$ref': '#/components/schemas/TransactionType'
        },
        amount: {
            '$ref': '#/components/schemas/TransactionAmount'
        }
    }
} as const;

export const $Transaction = {
    allOf: [
        {
            '$ref': '#/components/schemas/TransactionPartial'
        },
        {
            type: 'object',
            required: ['transactionId', 'createdAt'],
            properties: {
                transactionId: {
                    '$ref': '#/components/schemas/UUID'
                },
                createdAt: {
                    '$ref': '#/components/schemas/ISODate'
                }
            }
        }
    ]
} as const;

export const $CreateAccountRequest = {
    type: 'object',
    properties: {
        supportedCurrencies: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SupportedCurrencies'
            }
        }
    }
} as const;

export const $CreateAccountTransactionRequest = {
    '$ref': '#/components/schemas/TransactionPartial'
} as const;

export const $UpdateAccountRequest = {
    type: 'object',
    properties: {
        supportedCurrencies: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SupportedCurrencies'
            }
        }
    }
} as const;